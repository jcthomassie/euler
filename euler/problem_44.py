# -*- coding: utf-8 -*-
"""
Pentagon numbers
================
https://projecteuler.net/problem=44

Pentagonal numbers are generated by the formula, Pn=n(3n−1)/2. The first ten
pentagonal numbers are:

    1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...

It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their difference,
70 − 22 = 48, is not pentagonal.

Find the pair of pentagonal numbers, Pj and Pk, for which their sum and
difference are pentagonal and D = |Pk − Pj| is minimised; what is the value of
D?
"""
import math

from .problem_45 import generate_pentagonals
from .utils import print_result


def is_pentagonal(p: int) -> int:
    """
    P = n * (3n - 1) / 2

    If P is pentagonal, the above equation will have a positive integer solution
    for n. We use the quadratic formula to check if either solution for n is a
    positive integer
    """
    root = math.sqrt(24 * p + 1)
    return root.is_integer() and ((1 + root) / 6).is_integer()


@print_result
def solve() -> int:
    pentagonals: list[int] = []
    for p_j in generate_pentagonals(1):
        for p_k in pentagonals:
            if is_pentagonal(p_j + p_k) and is_pentagonal(p_j - p_k):
                return p_j - p_k
        pentagonals.append(p_j)
    raise RuntimeError("Failed to find solution")


if __name__ == "__main__":
    solve()
